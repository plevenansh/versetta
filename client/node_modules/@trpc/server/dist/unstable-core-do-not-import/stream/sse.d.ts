import type { ValidateShape } from '../types';
import type { ConsumerOnError } from './jsonl';
type Serialize = (value: any) => any;
type Deserialize = (value: any) => any;
/**
 * Server-sent Event Message
 * @see https://html.spec.whatwg.org/multipage/server-sent-events.html
 * @public
 */
export interface SSEMessage {
    /**
     * The data field of the message - this can be anything
     */
    data: unknown;
    /**
     * The id for this message
     * Passing this id will allow the client to resume the connection from this point if the connection is lost
     * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#the-last-event-id-header
     */
    id: string;
}
declare const sseSymbol: unique symbol;
export type SSEMessageEnvelope<TData> = [typeof sseSymbol, TData];
/**
 * Produce a typed server-sent event message
 */
export declare function sse<TData extends SSEMessage>(event: ValidateShape<TData, SSEMessage>): SSEMessageEnvelope<TData>;
export declare function isSSEMessageEnvelope<TData extends SSEMessage>(value: unknown): value is SSEMessageEnvelope<TData>;
export type SerializedSSEvent = Omit<SSEMessage, 'data'> & {
    data?: string;
};
/**
 * @internal
 */
export interface PingOptions {
    /**
     * Enable ping comments sent from the server
     * @default false
     */
    enabled: boolean;
    /**
     * Interval in milliseconds
     * @default 1000
     */
    intervalMs?: number;
}
export interface SSEStreamProducerOptions {
    serialize?: Serialize;
    data: AsyncIterable<unknown>;
    maxDepth?: number;
    ping?: PingOptions;
    /**
     * Maximum duration in milliseconds for the request before ending the stream
     * Only useful for serverless runtimes
     * @default undefined
     */
    maxDurationMs?: number;
    /**
     * End the request immediately after data is sent
     * Only useful for serverless runtimes that do not support streaming responses
     * @default false
     */
    emitAndEndImmediately?: boolean;
}
/**
 *
 * @see https://html.spec.whatwg.org/multipage/server-sent-events.html
 */
export declare function sseStreamProducer(opts: SSEStreamProducerOptions): ReadableStream<string>;
export type inferSSEOutput<TData> = TData extends SSEMessageEnvelope<infer $Data> ? $Data : TData;
/**
 * @see https://html.spec.whatwg.org/multipage/server-sent-events.html
 */
export declare function sseStreamConsumer<TData>(opts: {
    from: EventSource;
    onError?: ConsumerOnError;
    deserialize?: Deserialize;
}): AsyncIterable<inferSSEOutput<TData>>;
export declare const sseHeaders: {
    readonly 'Content-Type': "text/event-stream";
    readonly 'Cache-Control': "no-cache, no-transform";
    readonly 'X-Accel-Buffering': "no";
    readonly Connection: "keep-alive";
};
export {};
//# sourceMappingURL=sse.d.ts.map