generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  name            String
  gender          String?
  workOsUserId    String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  teamMemberships TeamMember[]
  createdTeams    Team[]        @relation("TeamCreator")
  subscriptions   Subscription[] // New field to establish the reverse relation
  
  @@map("users")
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  workOsOrgId     String       @unique
  creatorId   Int
  projects    Project[]
  tasks       Task[]
  members     TeamMember[]
  creator     User         @relation("TeamCreator", fields: [creatorId], references: [id])
  subscription    Subscription?
  
  @@index([creatorId])
  @@map("teams")
}

model TeamMember {
  id              Int       @id @default(autoincrement())
  userId          Int
  teamId          Int
  role            String
  joinedAt        DateTime  @default(now())
  workOsMembershipId String?   @unique
  createdProjects Project[] @relation("ProjectCreator")
  assignedTasks   Task[]    @relation("TaskAssignee")
  createdTasks    Task[]    @relation("TaskCreator")
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id])

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Subscription {
  id            String   @id @default(cuid())
  teamId        Int      @unique
  team          Team     @relation(fields: [teamId], references: [id])
  teamName      String
  status        String   // 'active', 'inactive', 'pending'
  provider      String   // 'razorpay' or 'polar'
  providerId    String?  // ID from the payment provider
  subActive     Boolean  @default(false)
  creatorId     Int      // New field to store the creator's user ID
  creator       User     @relation(fields: [creatorId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
model Project {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  status        String         @default("active")
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  teamId        Int
  creatorId     Int
  creationOrder Int            @default(autoincrement())
  completed     Boolean        @default(false)
  creator       TeamMember     @relation("ProjectCreator", fields: [creatorId], references: [id])
  team          Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  stages        ProjectStage[]
  tasks         Task[]

  @@index([teamId])
  @@index([creatorId])
}

model ProjectStage {
  id        Int     @id @default(autoincrement())
  projectId Int
  stage     String
  completed Boolean @default(false)
  order     Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, stage])
  @@index([projectId])
}

model Task {
  id            Int         @id @default(autoincrement())
  title         String
  description   String?
  status        String      @default("pending")
  dueDate       DateTime?
  projectId     Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  teamId        Int
  assigneeId    Int?
  creatorId     Int
  creationOrder Int         @default(autoincrement())
  assignee      TeamMember? @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator       TeamMember  @relation("TaskCreator", fields: [creatorId], references: [id])
  project       Project?    @relation(fields: [projectId], references: [id])
  team          Team        @relation(fields: [teamId], references: [id], onDelete: SetNull)

  @@index([teamId])
  @@index([projectId])
  @@index([creatorId])
  @@index([assigneeId])
}
