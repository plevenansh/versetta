generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
 // directUrl = env("DIRECT_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  name            String
  gender          String?
  workOsUserId    String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  teamMemberships TeamMember[]
  createdTeams    Team[]        @relation("TeamCreator")
  subscriptions   Subscription[]
  commentAnalyses CommentAnalysis[]
  

  @@map("users")
}

model Team {
  id              Int          @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  workOsOrgId     String       @unique
  creatorId       Int
  subActive       Boolean      @default(false)
  projects        Project[]
  tasks           Task[]
  members         TeamMember[]
  creator         User         @relation("TeamCreator", fields: [creatorId], references: [id])
  subscription    Subscription?
  storage         Storage[]
  folders         Folder[]  
  @@index([creatorId])
  @@map("teams")
}

model TeamMember {
  id                 Int       @id @default(autoincrement())
  userId             Int
  teamId             Int
  role               String
  access             AccessLevel
  joinedAt           DateTime  @default(now())
  workOsMembershipId String?   @unique
  createdProjects    Project[] @relation("ProjectCreator")
  assignedTasks      Task[]    @relation("TaskAssignee")
  createdTasks       Task[]    @relation("TaskCreator")
  createdStorage Storage[] @relation("StorageCreator")
  team               Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user               User      @relation(fields: [userId], references: [id])
  mentions          CommentMention[]
  comments          Comment[]
  createdFolders    Folder[] @relation("FolderCreator")
 
  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

enum AccessLevel {
  ADMIN
  MANAGER
  MEMBER
}

model Subscription {
  id            String   @id @default(cuid())
  teamId        Int      @unique
  team          Team     @relation(fields: [teamId], references: [id])
  teamName      String
  status        String
  type          String
  provider      String?
  providerId    String?
  plan          String
  creatorId     Int
  creator       User     @relation(fields: [creatorId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Project {
  id              Int        @id @default(autoincrement())
  title           String
  description     String?
  status          String         @default("active")
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  teamId          Int
  creatorId       Int

  duration        String
  completed       Boolean        @default(false)
  creator         TeamMember     @relation("ProjectCreator", fields: [creatorId], references: [id])
  team            Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  mainStages      MainStage[]
  subStages       SubStage[]
  tasks           Task[]
  storage         Storage[]
  comments        Comment[]

  @@index([teamId])
  @@index([creatorId])
}

model MainStage {
  id          Int        @id @default(autoincrement())
  name        String
  projectId   Int
  starred     Boolean   @default(false)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  subStages   SubStage[]
  tasks       Task[]
  comments    Comment[]

  @@unique([projectId, name])
  @@index([projectId])
}

model SubStage {
  id           Int        @id @default(autoincrement())
  name        String
  enabled     Boolean   @default(true)
  starred     Boolean   @default(false)
  mainStageId Int
  projectId   Int       // Add this line
  content     Json?
  mainStage   MainStage @relation(fields: [mainStageId], references: [id])
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  storage     Storage[]
  comments    Comment[]
  
  @@index([mainStageId])
  @@index([projectId]) // Add this line
}

model Task {
  id            Int           @id @default(autoincrement())
  title         String
  description   String?
  status        TaskStatus    @default(PENDING)
  priority      TaskPriority  @default(MEDIUM)
  dueDate       DateTime?
  projectId     Int?
  mainStageId   Int?
  subStageId    Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  teamId        Int
  assigneeId    Int?
  creatorId     Int
  creationOrder Int           @default(autoincrement())
  assignee      TeamMember?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator       TeamMember    @relation("TaskCreator", fields: [creatorId], references: [id])
  project       Project?       @relation(fields: [projectId], references: [id])
  mainStage     MainStage?    @relation(fields: [mainStageId], references: [id])
  subStage      SubStage?     @relation(fields: [subStageId], references: [id])
  team          Team          @relation(fields: [teamId], references: [id], onDelete: SetNull)

  @@index([teamId])
  @@index([projectId])
  @@index([mainStageId])
  @@index([subStageId])
  @@index([creatorId])
  @@index([assigneeId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

// Update the StorageType enum
enum StorageType {
  THUMBNAIL
  RAW_FOOTAGE
  FINISHED_VIDEO
  INSPIRATION
  STORYBOARD
  PROJECT_ASSET
  TEAM_ASSET
  CUSTOM
}

// Add a new model for folders
model Folder {
  id          Int       @id @default(autoincrement())
  name        String
  path        String    // Full path of the folder
  parentPath  String?   // Parent folder path
  teamId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creatorId   Int
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  creator     TeamMember @relation("FolderCreator", fields: [creatorId], references: [id])
  files       Storage[]

  @@unique([teamId, path])
  @@index([teamId])
  @@index([creatorId])
}

// Update the Storage model
model Storage {
  id          Int         @id @default(autoincrement())
  name        String
  type        StorageType
  url         String
  blobName    String      @unique
  contentType String?
  starred     Boolean   @default(false)
  size        Int?
  path        String      // Full path in the blob storage
  teamId      Int
  projectId   Int?
  subStageId  Int?
  folderId    Int?
  creatorId   Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  subStage    SubStage?   @relation(fields: [subStageId], references: [id], onDelete: Cascade)
  folder      Folder?     @relation(fields: [folderId], references: [id])
  creator     TeamMember  @relation("StorageCreator", fields: [creatorId], references: [id])

  metadata    Json?       // Store additional metadata
  tags        String[]    // Array of tags for better filtering
  isPublic    Boolean     @default(false)
  
  @@index([teamId])
  @@index([projectId])
  @@index([subStageId])
  @@index([folderId])
  @@index([creatorId])
  @@index([type])
}

model CommentAnalysis {
  id              Int      @id @default(autoincrement())
  youtubeUrl      String
  prompt          String
  generalAnalysis String   @db.Text
  topComments     Json
  contentIdeas    Json
  metrics         Json
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())

  @@index([userId])
}

model Comment {
  id           Int       @id @default(autoincrement())
  content      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  projectId    Int
  project      Project   @relation(fields: [projectId], references: [id])
  authorId     Int
  author       TeamMember @relation(fields: [authorId], references: [id])
  parentId     Int?
  parent       Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[] @relation("CommentReplies")
  mentions     CommentMention[]
  mainStageId  Int?
  mainStage    MainStage? @relation(fields: [mainStageId], references: [id])
  subStageId   Int?
  subStage     SubStage?  @relation(fields: [subStageId], references: [id])

  @@index([projectId])
  @@index([authorId])
  @@index([parentId])
  @@index([mainStageId])
  @@index([subStageId])
}


model CommentMention {
  id           Int       @id @default(autoincrement())
  commentId    Int
  comment      Comment   @relation(fields: [commentId], references: [id])
  teamMemberId Int
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])

  @@index([commentId])
  @@index([teamMemberId])
}