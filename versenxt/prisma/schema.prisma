datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int          @id @default(autoincrement())
  email           String       @unique
  name            String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  teamMemberships TeamMember[]
  projects        Project[]
  tasks           Task[]
  Team            Team[]
  // createdTeams    Team[]          @relation("TeamCreator")
  // createdProjects Project[]       @relation("ProjectCreator")
  // createdTasks    Task[]          @relation("TaskCreator")
  // assignedTasks   Task[]          @relation("TaskAssignee")
  
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      Int // Represents the team creator
  user        User         @relation(fields: [userId], references: [id])
  members     TeamMember[]
  projects    Project[]
  tasks       Task[]

  // creatorId   Int
  // creator     User      @relation("TeamCreator", fields: [creatorId], references: [id])

  @@index([userId])
}

model TeamMember {
  id       Int      @id @default(autoincrement())
  userId   Int
  teamId   Int
  role     String // e.g., "admin", "member"
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  team     Team     @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      String    @default("active")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  teamId      Int
  userId      Int // Represents both creator and owner
  team        Team      @relation(fields: [teamId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  tasks       Task[]

  // creatorId   Int
  // creator     User      @relation("ProjectCreator", fields: [creatorId], references: [id])

  @@index([teamId])
  @@index([userId])
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      String    @default("pending")
  dueDate     DateTime?
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   Int?
  teamId      Int?
  userId      Int // Represents creator, owner, and assignee
  project     Project?  @relation(fields: [projectId], references: [id])
  team        Team?     @relation(fields: [teamId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  // creatorId   Int
  // assigneeId  Int?
  // creator     User      @relation("TaskCreator", fields: [creatorId], references: [id])
  // assignee    User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])

  @@index([projectId])
  @@index([teamId])
  @@index([userId])
}
