datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  name            String
  gender          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  teamMemberships TeamMember[]
}

model Team {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     TeamMember[]
  projects    Project[]
  tasks       Task[]        // Tasks directly associated with the team
}

model TeamMember {
  id         Int       @id @default(autoincrement())
  userId     Int
  teamId     Int
  role       String    // e.g., "admin", "member"
  joinedAt   DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  team       Team      @relation(fields: [teamId], references: [id])
  createdTasks Task[]  @relation("TaskCreator")
  assignedTasks Task[] @relation("TaskAssignee")

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Project {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  status      String        @default("active")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  teamId      Int
  team        Team          @relation(fields: [teamId], references: [id])
  tasks       Task[]        // Tasks associated with this project
  stages      ProjectStage[]

  @@index([teamId])
}

model ProjectStage {
  id        Int     @id @default(autoincrement())
  projectId Int
  stage     String
  completed Boolean @default(false)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, stage])
  @@index([projectId])
}

model Task {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  status      String      @default("pending")
  dueDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  teamId      Int         // All tasks must belong to a team
  projectId   Int?        // Optional: task may or may not be associated with a project
  creatorId   Int         // TeamMember who created the task
  assigneeId  Int?        // Optional: task may or may not be assigned to a team member
  team        Team        @relation(fields: [teamId], references: [id])
  project     Project?    @relation(fields: [projectId], references: [id])
  creator     TeamMember  @relation("TaskCreator", fields: [creatorId], references: [id])
  assignee    TeamMember? @relation("TaskAssignee", fields: [assigneeId], references: [id])

  @@index([teamId])
  @@index([projectId])
  @@index([creatorId])
  @@index([assigneeId])
}
