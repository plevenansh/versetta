




update: publicProcedure
    .input(z.object({
      id: z.number(),
      title: z.string().optional(),
      description: z.string().optional(),
      status: z.string().optional(),
      startDate: z.string().optional().transform(str => str ? new Date(str) : undefined),
      endDate: z.string().optional().transform(str => str ? new Date(str) : undefined),
      teamId: z.number().optional(),
      userId: z.number().optional()
    }))
    .mutation(async ({ input }) => {
      console.log("Input received for project update:", input);
      try {
        const { id, ...data } = input;
        const updateData: Prisma.ProjectUpdateInput = {
          ...data,
          team: data.teamId ? { connect: { id: data.teamId } } : undefined,
          user: data.userId ? { connect: { id: data.userId } } : undefined
        };
        delete input.teamId;
        delete input.userId;

        const updatedProject = await prisma.project.update({ 
          where: { id }, 
          data: updateData,
          include: { 
            tasks: true,
            team: true,
            user: true
          }
        });
        console.log('Project updated successfully:', updatedProject);
        return updatedProject;
      } catch (error) {
        console.error(`Error updating project with id ${input.id}:`, error);
        throw new Error('Failed to update project');
      }
    }),

 